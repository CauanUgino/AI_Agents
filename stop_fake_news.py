import os
from dotenv import load_dotenv
from crewai import Agent, Task, Process, Crew, LLM
from crewai_tools import SerperDevTool
import streamlit as st
import time
import datetime
import qrcode
from PIL import Image
from io import BytesIO
import base64
import re
import pandas as pd
import matplotlib.pyplot as plt
from collections import Counter

# Carregando vari√°veis de ambiente
load_dotenv()




OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SERPER_API_KEY = os.getenv("SERPER_API_KEY")

# Instanciando o modelo LLM
llm = LLM(model='gpt-4o-mini', api_key=OPENAI_API_KEY)

# Instanciando a ferramenta de busca
search_tool = SerperDevTool()

classificacoes = ["confi√°vel", "n√£o confi√°vel", "parcialmente confi√°vel", "confi√°vel", "confi√°vel", "n√£o confi√°vel"]
contagem = Counter(classificacoes)

st.set_page_config(page_title="Stop Fake News - Verificador", page_icon="üì∞", layout="centered")
st.markdown("""
    <style>
        .main {
            background-color: #f3f8f2;
            color: #0b3d0b;
        }
        .stButton > button {
            background-color: #2e7d32;
            color: white;
        }
    </style>
""", unsafe_allow_html=True)



# SIDEBAR (DASHBOARD)
st.sidebar.title("üìä Verifica√ß√µes")
if 'historico' not in st.session_state:
    st.session_state['historico'] = []




# Informa√ß√µes do hist√≥rico
total_analises = len(st.session_state['historico'])
ultima_analise = st.session_state['historico'][-1]['tema'] if st.session_state['historico'] else "-"
ultima_data = st.session_state['historico'][-1]['data'] if st.session_state['historico'] else "-"
ultima_classificacao = st.session_state['historico'][-1]['classificacao'] if st.session_state['historico'] else "-"

st.sidebar.metric("Total de An√°lises", total_analises)
st.sidebar.metric("√öltimo Tema", ultima_analise)
st.sidebar.metric("Data da √öltima", ultima_data)
st.sidebar.metric("√öltimo Resultado", ultima_classificacao)

# Bot√£o para limpar o hist√≥rico
if st.sidebar.button("üßπ Limpar hist√≥rico"):
    st.session_state['historico'] = []

# Garante que o hist√≥rico sempre exista como lista (ou esteja vazio)
historico = st.session_state.get('historico', [])


st.sidebar.markdown("---")
st.sidebar.markdown("Desenvolvido por **Cauan Ugino Filho**")
st.sidebar.caption("Aluno do Instituto Federal de Sergipe (IFS)")

st.markdown("---")
st.markdown("### ü§ñ Informa√ß√£o sem verifica√ß√£o √© desinforma√ß√£o")

st.title("üì∞ Stop Fake News")
st.subheader("Sistema de verifica√ß√£o de confiabilidade de not√≠cias")


# Entrada do usu√°rio
tema = st.text_input("Informe a Not√≠cia:")
executar = st.button("Executar Verifica√ß√£o")

if executar and tema:
    with st.spinner("Analisando..."):
        # Aqui roda a verifica√ß√£o (simula√ß√£o com sleep)
        time.sleep(5)  # simula tempo de an√°lise
    st.success("An√°lise conclu√≠da!")
    with st.spinner ("Processando informa√ß√£o..."):
        time.sleep(5)
    st.success("Informa√ß√µes processadas...")
    
    # Agentes
    agente_buscador = Agent(
    role="Jornalista Investigativo",
    goal=f"Investigar sobre {tema} em fontes confi√°veis como: Google factcheck(https://toolbox.google.com/factcheck/explorer/search/list:recent;hl=pt) , Lupa(https://lupa.uol.com.br/) ,  Aos Fatos(https://www.aosfatos.org/) ,  G1(https://g1.globo.com/) , CNN(https://www.cnnbrasil.com.br/)  , BBC(https://www.bbc.com/), etc.",
    backstory="Voc√™ √© especialista em investiga√ß√£o de fake news com amplo acesso a ferramentas de busca.",
    tools=[search_tool],
    llm=llm,
    verbose=True,
    memory=True,
    allow_delegation=False
)

    # Agente lingu√≠stico
    agente_linguistico = Agent(
        role='Agente Lingu√≠stico',
        goal=("Avaliar o estilo textual do texto recebido, identificando excesso de adjetivos, "
            "linguagem alarmista e uso de clickbait."
            "Identificar o idioma e traduzir para o Portugu√™s do Brasil."
            "aplica a avali√ß√£o do estilo textual no texto"
        ),

        backstory='Voc√™ √© um editor de textos experiente focado em melhorar a qualidade jornal√≠stica.',
        llm=llm,
        verbose=True,
        memory=False,
        allow_delegation=False
)

    agente_verificador = Agent(
        role='Verificador de Fatos',
        goal="Verificar os fatos presentes no texto final com fontes confi√°veis como: Google factcheck(https://toolbox.google.com/factcheck/explorer/search/list:recent;hl=pt) , Lupa(https://lupa.uol.com.br/) ,  Aos Fatos(https://www.aosfatos.org/) ,  G1(https://g1.globo.com/) , CNN(https://www.cnnbrasil.com.br/)  , BBC(https://www.bbc.com/), etc."
            "Mostre se a informa√ß√£o perguntada no {tema} √© VERDADEIRA, FALSA ou PACIALMENTE VERDADEIRA"
            "No final da sua resposta, **obrigatoriamente** adicione uma linha com o seguinte formato:"
            "STATUS: [classifica√ß√£o]"
            "Onde `[classifica√ß√£o]` deve ser uma das seguintes op√ß√µes:"
            "- Verdadeira"
            "- falsa"
            "- duvidosa"

            "Exemplo de final da resposta:"
            "STATUS: confi√°vel",
        backstory=(
            "Voc√™ √© um especialista em fact-checking, experiente em identificar not√≠cias falsas "
            "e confirmar dados com fontes oficiais e confi√°veis."
        ),
        tools=[search_tool],
        llm=llm,
        verbose=True,
        memory=False,
        allow_delegation=False
    )

    # Agente classificador de confiabilidade
    agente_classificador = Agent(
        role='Classificador de Confiabilidade',
        goal=(
            "Ler o texto revisado e o relat√≥rio de verifica√ß√£o de fatos. "
            "Aplicar regras heur√≠sticas para decidir se a not√≠cia √© Confi√°vel, Possivelmente Falsa ou Exige Verifica√ß√£o Adicional, "
            "com base nas fontes. "
            "Retornar uma resposta estruturada com dois campos:\n\n"
            "1) STATUS: <Confi√°vel | Possivelmente Falsa | Exige Verifica√ß√£o Adicional>\n"
            "2) JUSTIFICATIVA: <texto explicando a decis√£o>\n"
            "Certifique-se de fornecer uma justificativa clara e objetiva com base nas evid√™ncias apresentadas."
        ),
        backstory=(
            "Voc√™ √© um agente l√≥gico que toma decis√µes com base em evid√™ncias fornecidas pelos outros agentes. "
            "Utiliza regras heur√≠sticas e simb√≥licas para garantir uma classifica√ß√£o confi√°vel."
        ),
        llm=llm,
        verbose=False,
        memory=False,
        allow_delegation=False
    )


    # Tarefas da primeira etapa
    tarefa_buscador = Task(
        description=f'Pesquisar not√≠cias confi√°veis sobre {tema} nos sites como https://www.bbc.com/ , https://www.bbc.com/portuguese/topics/cz74k717pw5t , https://www.bbc.com/portuguese/topics/cz74k717pw5t , https://g1.globo.com/https://g1.globo.com/ e criar um relat√≥rio com fatos e links.',
        expected_output='Relat√≥rio com data, fontes e links.',
        agent=agente_buscador,
        output_file='relatorio_investigativo.md'
    )

    tarefa_linguistica = Task(
        description='Analisar o texto jornal√≠stico e avaliar o estilo textual conforme crit√©rios definidos.',
        expected_output=(
            "Texto jornal√≠stico revisado e editado, com linguagem adequada, "
            "sem excesso de adjetivos, sem tom alarmista e sem clickbait, "
            "traduzido para o Portugu√™s do Brasil, se necess√°rio."
        ),
        agent=agente_linguistico,
        input='relatorio_investigativo.md',
        output_file='relatorio_linguistico.md'
    )

    # Tem erro aqui na parte dizer qual e verdade, duvidoso ou fake
    tarefa_verificacao = Task(
        description="Verificar os fatos do texto editado com fontes em sites como https://toolbox.google.com/factcheck/explorer/search/list:recent;hl=pt , https://lupa.uol.com.br/, Aos https://www.aosfatos.org/ . Gerar relat√≥rio de veracidade.",
        expected_output="Exibir as noticias encontradas, e abaixo exibir a fonte e link"
                        "Criar Um Qrcode do Link Exibir ao lado dele"
                        "Traduzir tudo para o Portugu√™s do Brasil"
                        "Exiba o resultado da verifica√ß√£o da noticia informada no tema, dizendo se √© VERDADEIRA, FALSA ou PACIALMENTE VERDADEIRA"
                        "Exiba a noticia das fontes encontradas",
        agent=agente_verificador,
        input='relatorio_linguistico.md',
        output_file='relatorio_verificacao.md'
    )

    equipe_inicial = Crew(
        agents=[agente_buscador, agente_linguistico, agente_verificador],
        tasks=[tarefa_buscador, tarefa_linguistica, tarefa_verificacao],
        process=Process.sequential,
        llm=llm
    )

    equipe_inicial.kickoff(inputs={'tema': tema})

    with open("relatorio_linguistico.md", "r", encoding="utf-8") as f1, open("relatorio_verificacao.md", "r", encoding="utf-8") as f2:
        texto_final = "# Texto Jornal√≠stico Revisado\n\n" + f1.read() + "\n\n# Relat√≥rio de Verifica√ß√£o de Fatos\n\n" + f2.read()

    with open("entrada_classificacao.md", "w", encoding="utf-8") as f_out:
        f_out.write(texto_final)

    # Tarefa de classifica√ß√£o
    tarefa_classificacao = Task(
        description=(
            "Ler o texto revisado e o relat√≥rio de verifica√ß√£o de fatos. "
            "Aplicar regras heur√≠sticas para decidir se a not√≠cia √© confi√°vel, possivelmente falsa ou exige verifica√ß√£o adicional. "
            "Aplique acima da noticia um nome que confirme tipo: Confi√°vel, possivelmente falsa"
            "Comece o parecer com: STATUS: <classifica√ß√£o> e em seguida: "
            "JUSTIFICATIVA: <explica√ß√£o detalhada>."

        ),
        expected_output=(
            "Classifica√ß√£o final da not√≠cia: Confi√°vel, possivelmente falsa, com justificativas."
        ),
        agent=agente_classificador,
        input='entrada_classificacao.md',
        output_file='Resultado_final.md'
    )


    equipe_final = Crew(
        agents=[agente_classificador],
        tasks=[tarefa_classificacao],
        process=Process.sequential,
        llm=llm
    )

    equipe_final.kickoff()

    # Fun√ß√£o para gerar o QR code em base64
    def gerar_qr_base64(link):
        qr = qrcode.QRCode(box_size=2, border=1)
        qr.add_data(link)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")
        buffer = BytesIO()
        img.save(buffer, format="PNG")
        img_b64 = base64.b64encode(buffer.getvalue()).decode()
        return f'<img src="data:image/png;base64,{img_b64}" width="60" style="margin-left:10px;" />'

    # Regex para capturar links http/https
    link_pattern = re.compile(r'(https?://[^\s\)\]]+)')

    # Leitura do relat√≥rio de verifica√ß√£o
    with open("relatorio_verificacao.md", "r", encoding="utf-8") as f:
        st.markdown("### üîç Relat√≥rio de Verifica√ß√£o de Fatos")
        texto_verificacao = f.read()

        linhas_formatadas = []

        for linha in texto_verificacao.split("\n"):
            linha = linha.strip()
            links = link_pattern.findall(linha)
            if links:
                for link in links:
                    qr_img = gerar_qr_base64(link)
                    # Substitui o link pelo link com o QR ao lado
                    linha = linha.replace(link, f'<a href="{link}" target="_blank">{link}</a>{qr_img}')
                linhas_formatadas.append(f'<div style="margin-bottom:10px;">{linha}</div>')
            else:
                linhas_formatadas.append(f"<p>{linha}</p>")

    # Exibe o conte√∫do formatado com imagens inline
    st.markdown("\n".join(linhas_formatadas), unsafe_allow_html=True)
    with open("Resultado_final.md", "r", encoding="utf-8") as f:
        st.markdown("### ‚úÖ Parecer Final")
        st.markdown(f.read())

    # Extrair a classifica√ß√£o final (exemplo: STATUS: Confi√°vel)
    match = re.search(r"STATUS:\s*(.*?)\n", 'parecer_final')
    classificacao_final = match.group(1).strip().capitalize() if match else "Desconhecida"

    # Salvar no hist√≥rico da sess√£o
    if "Confi√°vel" in classificacao_final:
        classificacao = "Confi√°vel"
    elif "Possivelmente Falsa" in classificacao_final:
        classificacao = "Possivelmente Falsa"
    else:
        classificacao = "Exige Verifica√ß√£o Adicional"

    st.session_state['historico'].append({
        "tema": tema,
        "data": datetime.datetime.now().strftime("%d/%m/%Y %H:%M"),
        "classificacao": classificacao
    })

    # Contar as classifica√ß√µes reais no hist√≥rico
    contagem = Counter([item['classificacao'] for item in st.session_state['historico']])

    # Labels e valores para o gr√°fico
    labels = list(contagem.keys())
    valores = list(contagem.values())

    # Cores (voc√™ pode ajustar conforme os r√≥tulos)
    cores = []
    for label in labels:
        if label == "Verdadeira":
            cores.append('#4CAF50')  # verde
        elif label == "Possivelmente Falsa":
            cores.append('#FF9800')  # laranja
        else:
            cores.append('#F44336')  # vermelho

    # Criar gr√°fico de pizza e mostrar no Streamlit
    fig, ax = plt.subplots(figsize=(6,6))
    ax.pie(valores, labels=labels, autopct='%1.1f%%', startangle=140, colors=cores)
    ax.set_title('Distribui√ß√£o das Classifica√ß√µes de Confiabilidade')
    ax.axis('equal')  # para ficar circular

    st.pyplot(fig)

    st.markdown("---")
     # Frase de impacto ap√≥s o parecer
    st.markdown(
    """
    <div style='text-align: center; color: darkred; font-size: 24px; font-weight: bold; margin-top: 40px;'>
        üö® Cheque antes de compartilhar!
    </div>
    """,
    unsafe_allow_html=True
)
    
    st.markdown(
    """
    <div style='
        text-align: center;
        color: #37474f;
        font-size: 35px;
        font-weight: normal;
    '>
        ‚úÖ Combater fake news come√ßa com voc√™.
    </div>
    """,
    unsafe_allow_html=True
)



       # === Salvando no hist√≥rico da sess√£o ===
    if "Confi√°vel" in 'parecer_final':
        classificacao = "Confi√°vel"
    elif "Possivelmente Falsa" in 'parecer_final':
        classificacao = "Possivelmente Falsa"
    else:
        classificacao = "Exige Verifica√ß√£o Adicional"

    st.session_state['historico'].append({
        "tema": tema,
        "data": datetime.datetime.now().strftime("%d/%m/%Y %H:%M"),
        "classificacao": classificacao
    })



    
elif executar:
    st.warning("Por favor, insira um tema para iniciar a verifica√ß√£o.")
